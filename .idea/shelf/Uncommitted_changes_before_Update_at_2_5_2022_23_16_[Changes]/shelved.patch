Index: .idea/formation_python.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/formation_python.iml b/.idea/formation_python.iml
--- a/.idea/formation_python.iml	(revision 865a95a051c9b9be8de75bd967fd5e49b8ac33af)
+++ b/.idea/formation_python.iml	(date 1644094645131)
@@ -1,8 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.10 (formation_python)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/formation_python.iml\" filepath=\"$PROJECT_DIR$/.idea/formation_python.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	(revision 865a95a051c9b9be8de75bd967fd5e49b8ac33af)
+++ b/.idea/modules.xml	(date 1644095527673)
@@ -2,7 +2,11 @@
 <project version="4">
   <component name="ProjectModuleManager">
     <modules>
+<<<<<<< HEAD
       <module fileurl="file://$PROJECT_DIR$/.idea/formation_python.iml" filepath="$PROJECT_DIR$/.idea/formation_python.iml" />
+=======
+      <module fileurl="file://$PROJECT_DIR$/.idea/di_learning.iml" filepath="$PROJECT_DIR$/.idea/di_learning.iml" />
+>>>>>>> 846caf8eb421c50090e2e0679d332eb636433440
     </modules>
   </component>
 </project>
\ No newline at end of file
Index: .idea/di_learning.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/di_learning.iml b/.idea/di_learning.iml
new file mode 100644
--- /dev/null	(date 1644095515978)
+++ b/.idea/di_learning.iml	(date 1644095515978)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.6\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 865a95a051c9b9be8de75bd967fd5e49b8ac33af)
+++ b/.idea/misc.xml	(date 1644095540669)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.6" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (formation_python)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: week6/d1python.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/week6/d1python.py b/week6/d1python.py
new file mode 100644
--- /dev/null	(date 1644095527714)
+++ b/week6/d1python.py	(date 1644095527714)
@@ -0,0 +1,16 @@
+a = 33
+b = 200
+
+number = int(input("enter number between 1 to 100"))
+print(type(number))
+
+if number % 5 == 0 and number % 3 == 0:
+    print("FizzBuzz")
+elif number % 3 == 0 :
+    print("Fizz")
+elif number % 5 == 0:
+    print("Buzz")
+
+else:
+    print("no good")
+
Index: week6/d3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/week6/d3.py b/week6/d3.py
new file mode 100644
--- /dev/null	(date 1644095527728)
+++ b/week6/d3.py	(date 1644095527728)
@@ -0,0 +1,167 @@
+
+#
+# Exercise 1 : Favorite Numbers
+# Instructions
+# Create a set called my_fav_numbers with all your favorites numbers.
+# Add two new numbers to the set.
+# Remove the last number.
+# Create a set called friend_fav_numbers with your friend’s favorites numbers.
+# Concatenate my_fav_numbers and friend_fav_numbers to a new variable called our_fav_numbers.
+#
+my_fav_numbers = [2, 3, 4, 5]
+print(my_fav_numbers)
+my_fav_numbers.append(6)
+my_fav_numbers.append(7)
+print(my_fav_numbers)
+my_fav_numbers.pop()
+print(my_fav_numbers)
+friend_fav_numbers = [10,11,12,13]
+my_fav_numbers.extend(friend_fav_numbers)
+print(my_fav_numbers)
+
+
+
+#
+# Exercise 2: Tuple
+# Instructions
+# Given a tuple which value is integers, is it possible to add more integers to the tuple?
+# ----- yes
+
+#
+# Exercise 3: Print A Range Of Numbers
+# Instructions
+# Use a for loop to print all numbers from 1 to 20, inclusive.
+#
+my_range = range(1,21)
+for i in my_range:
+    print(i)
+
+#
+# Exercise 4: Floats
+# Instructions
+# Recap – What is a float? What is the difference between an integer and a float?
+# Can you think of another way to generate a sequence of floats?
+# Create a list containing the following sequence 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5 (don’t hard-code the sequence).
+#
+listFloat = []
+num = 1.5
+
+while num <= 5:
+    listFloat.append(num)
+    num += 0.5
+
+print(listFloat)
+#
+# Exercise 5: Shopping List
+# Instructions
+# Using this list basket = ["Banana", "Apples", "Oranges", "Blueberries"];
+#
+list_basket = ["Banana", "Apples", "Oranges", "Blueberries"]
+
+# Remove “Banana” from the list.
+list_basket.remove("Banana")
+# Remove “Blueberries” from the list.
+list_basket.remove("Blueberries")
+# Add “Kiwi” to the end of the list.
+list_basket.append("Kiwi")
+# Add “Apples” to the beginning of the list.
+list_basket.insert(0, "Apples")
+# Count how many apples are in the basket.
+count_of_apples = list_basket.count("Apples")
+# Empty the basket.
+list_basket.clear()
+# Print(basket)
+print(list_basket)
+
+#
+# Exercise 6 : Loop
+# Instructions
+# Write a while loop that will continuously ask the user for their name, unless the input is equal to your name.
+#
+name = ""
+while name != "stephane":
+    name = input("enter your name ")
+#
+# Exercise 7
+# Instructions
+# Given a list, use a loop to print out every element which has an even index.
+#
+my_basket = ["Banana", "Apples", "Oranges", "Blueberries"]
+for i, val in enumerate(my_basket):
+    if i % 2 == 0:
+        print(val)
+
+
+#
+# Exercise 8
+# Instructions
+# Create a loop that goes from 1500 to 2500 and prints all multiples of 5 and 7.
+#
+for val in range(1500, 2500):
+    if val % 5 == 0 or val % 7 == 0:
+        print(val)
+#
+# Exercise 9: Favorite Fruits
+# Instructions
+# Ask the user to input their favorite fruit(s) (one or several fruits).
+favorite_fruit = input("enter your favorite fruit one or several fruits, separate the fruits with a single space ")
+
+# Hint : Use the built in input method. Ask the user to separate the fruits with a single space, eg. "apple mango cherry".
+# Store the favorite fruit(s) in a list (convert the string of words into a list of words).
+favorite_fruit_array = favorite_fruit.split(" ")
+print(favorite_fruit_array)
+
+# Now that we have a list of fruits, ask the user to input a name of any fruit.
+
+choice_fruit = input("enter name of one fruit ")
+print(choice_fruit)
+
+# If the user’s input is in the favorite fruits list, print “You chose one of your favorite fruits! Enjoy!”.
+
+if choice_fruit in favorite_fruit_array:
+    print("You chose one of your favorite fruits! Enjoy!")
+
+# If the user’s input is NOT in the list, print, “You chose a new fruit. I hope you enjoy”.
+#
+else:
+    print("You chose a new fruit. I hope you enjoy")
+#
+# Exercise 10: Who Ordered A Pizza ?
+# Instructions
+# Write a loop that asks a user to enter a series of pizza toppings, when the user inputs ‘quit’ stop asking for toppings.
+# As they enter each topping, print a message saying you’ll add that topping to their pizza.
+# Upon exiting the loop print all the toppings on the pizza pie and what the total price is (10 + 2.5 for each topping).
+#
+
+#
+# Exercise 11: Cinemax
+# Instructions
+# A movie theater charges different ticket prices depending on a person’s age.
+# if a person is under the age of 3, the ticket is free.
+# if they are between 3 and 12, the ticket is $10.
+# if they are over the age of 12, the ticket is $15.
+# Ask a family the age of each person who wants a ticket.
+# Store the total cost of all the family’s tickets and print it out.
+# A group of teenagers are coming to your movie theater and want to watch a movie that is restricted for people between the ages of 16 and 21.
+# Write a program that asks every user for their age, and prints a list of the teens who are permitted to watch the movie.
+#
+#
+# Exercise 12 : Who Is Under 16?
+# Instructions
+# Given a list of names, write a program that asks every user for their age, if they are less than 16 years old remove them from the list.
+# At the end, print the final list.
+#
+#
+# Exercise 13
+# Instructions
+# Make a list called sandwich_orders and fill it with the names of various sandwiches .
+# Then make an empty list called finished_sandwiches.
+# As each sandwich is made, move it to the list of finished sandwiches.
+# After all the sandwiches have been made, print a message listing each sandwich that was made , such as I made your tuna sandwich.
+#
+#
+# Exercise 14
+# Instructions
+# Using the list sandwich_orders from Exercise 13, make sure the sandwich ‘pastrami’ appears in the list at least three times.
+# Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a while loop to remove all occurrences of ‘pastrami’ from sandwich_orders.
+# Make sure no pastrami sandwiches end up in finished_sandwiches.
